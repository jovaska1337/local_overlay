--- a/processcore/plugins/nvidia/nvidia.h
+++ b/processcore/plugins/nvidia/nvidia.h
@@ -26,4 +26,9 @@
 
     QString m_sniExecutablePath;
     QProcess *m_process = nullptr;
+
+    int m_pidIndex;
+    int m_smIndex;
+    int m_memIndex;
+    int m_expected;
 };
--- a/processcore/plugins/nvidia/nvidia.cpp
+++ b/processcore/plugins/nvidia/nvidia.cpp
@@ -53,36 +54,72 @@
     m_process = new QProcess(this);
     m_process->setProgram(m_sniExecutablePath);
     m_process->setArguments({QStringLiteral("pmon")});
+   
+    // reset
+    m_expected = m_pidIndex = m_smIndex = m_memIndex = -1;
 
     connect(m_process, &QProcess::readyReadStandardOutput, this, [this]() {
         while (m_process->canReadLine()) {
             const QString line = QString::fromLatin1(m_process->readLine());
-            if (line.startsWith(QLatin1Char('#'))) { // comment line
-                if (line != QLatin1String("# gpu        pid  type    sm   mem   enc   dec   command\n")
-                    && line != QLatin1String("# Idx          #   C/G     %     %     %     %   name\n")) {
-                    // header format doesn't match what we expected, bail before we send any garbage
+
+            // header is not parsed yet
+            if (m_expected < 0) {
+                // not a comment line
+                if (!line.startsWith('#')) {
+                    continue;
+                }
+
+                // parse header
+                m_expected = -1; // header has one extra column
+                for (const auto &column : QStringView(line).split(QLatin1Char(' '), Qt::SkipEmptyParts))
+                {
+                    // format header --> reset
+                    if ((m_expected == 0) && !QString::compare(column, "idx", Qt::CaseInsensitive)) {
+                        m_expected = -1;
+                        break;
+
+                    // pid
+                    } else if (!QString::compare(column, "pid", Qt::CaseInsensitive)) {
+                        m_pidIndex = m_expected;
+
+                    // sm
+                    } else if (!QString::compare(column, "sm", Qt::CaseInsensitive)) {
+                        m_smIndex = m_expected;
+
+                    // mem
+                    } else if (!QString::compare(column, "mem", Qt::CaseInsensitive)) {
+                        m_memIndex = m_expected;
+                    }
+
+                    m_expected++;
+                }
+
+                // check that we got everything, otherwise terminate
+                if ((m_expected < 3) || (m_pidIndex < 0) || (m_smIndex < 0) || (m_memIndex < 0)) {
                     m_process->terminate();
+                    break;
                 }
-                continue;
-            }
-            const auto parts = QStringView(line).split(QLatin1Char(' '), Qt::SkipEmptyParts);
 
-            // format at time of writing is
-            // # gpu        pid  type    sm   mem   enc   dec   command
-            if (parts.count() < 5) { // we only access up to the 5th element
-                continue;
-            }
+            // row indecies are known
+            } else {
+                const auto parts = QStringView(line).split(QLatin1Char(' '), Qt::SkipEmptyParts);
+
+                // column count mismatch
+                if (parts.count() != m_expected)
+                    continue;
+
+                long pid = parts[m_pidIndex].toUInt();
+                int sm   = parts[m_smIndex].toUInt();
+                int mem  = parts[m_memIndex].toUInt();
+
+                KSysGuard::Process *process = getProcess(pid);
+                if (!process) {
+                    continue; // can in race condition etc
+                }
 
-            long pid = parts[1].toUInt();
-            int sm = parts[3].toUInt();
-            int mem = parts[4].toUInt();
-
-            KSysGuard::Process *process = getProcess(pid);
-            if (!process) {
-                continue; // can in race condition etc
+                m_usage->setData(process, sm);
+                m_memory->setData(process, mem);
             }
-            m_usage->setData(process, sm);
-            m_memory->setData(process, mem);
         }
     });
 }
